{
  "version": 3,
  "sources": ["../../../src/handler.ts", "../../../src/agenda/dto/AgendaDTO.ts", "../../../src/agenda/mocks/AgendaMock.ts", "../../../src/agenda/service/AgendaService.ts", "../../../src/agenda/controller/AgendaController.ts", "../../../src/agendamento/mocks/AgendamentoMock.ts", "../../../src/agendamento/service/AgendamentoService.ts", "../../../src/agendamento/dto/AgendamentoDTO.ts", "../../../src/agendamento/controller/AgendamentoController.ts"],
  "sourcesContent": ["export { buscarAgendas } from \"./agenda/controller/AgendaController\";\r\nexport { marcarAgendamento } from \"./agendamento/controller/AgendamentoController\";\r\n", "import { IAgenda } from \"../interface/IAgenda\";\r\n\r\nexport class AgendaDTO implements IAgenda {\r\n  id: number;\r\n  nome: string;\r\n  especialidade: string;\r\n  horarios_disponiveis: string[];\r\n\r\n  constructor(id: number, nome: string, especialidade: string, horarios_disponiveis: string[]) {\r\n    this.id = id;\r\n    this.nome = nome;\r\n    this.especialidade = especialidade;\r\n    this.horarios_disponiveis = horarios_disponiveis;\r\n  }\r\n}\r\n", "import { AgendaDTO } from \"../dto/AgendaDTO\";\r\n\r\nexport const agendaMock: AgendaDTO[] = [\r\n  new AgendaDTO(1, \"Dr. Jo\u00E3o Silva\", \"Cardiologista\", [\r\n    \"2024-10-05 09:00\",\r\n    \"2024-10-05 10:00\",\r\n    \"2024-10-05 11:00\",\r\n  ]),\r\n  new AgendaDTO(2, \"Dra. Maria Souza\", \"Dermatologista\", [\r\n    \"2024-10-06 14:00\",\r\n    \"2024-10-06 15:00\",\r\n  ]),\r\n];\r\n", "import { agendaMock } from \"../mocks/AgendaMock\";\r\nimport { IAgenda } from \"../interface/IAgenda\";\r\n\r\nexport class AgendaService {\r\n  buscarAgendas(): { medicos: IAgenda[] } {\r\n    return { medicos: agendaMock };\r\n  }\r\n}\r\n", "import { APIGatewayProxyHandler } from \"aws-lambda\";\r\nimport { AgendaService } from \"../service/AgendaService\";\r\n\r\nconst agendaService = new AgendaService();\r\n\r\nexport const buscarAgendas: APIGatewayProxyHandler = async () => {\r\n  const agendas = agendaService.buscarAgendas();\r\n  \r\n  return {\r\n    statusCode: 200,\r\n    body: JSON.stringify(agendas),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    }\r\n  };\r\n};\r\n", "import { AgendaDTO } from \"../../agenda/dto/AgendaDTO\";\r\nimport { AgendamentoDTO } from \"../dto/AgendamentoDTO\";\r\n\r\n// Mocks de agendas (recuperado do mock de agenda)\r\nexport const agendaMock: AgendaDTO[] = [\r\n  new AgendaDTO(1, \"Dr. Jo\u00E3o Silva\", \"Cardiologista\", [\r\n    \"2024-10-05 09:00\",\r\n    \"2024-10-05 10:00\",\r\n    \"2024-10-05 11:00\",\r\n  ]),\r\n  new AgendaDTO(2, \"Dra. Maria Souza\", \"Dermatologista\", [\r\n    \"2024-10-06 14:00\",\r\n    \"2024-10-06 15:00\",\r\n  ]),\r\n];\r\n\r\n// Mocks de agendamentos j\u00E1 realizados\r\nexport const agendamentoMock: AgendamentoDTO[] = [];\r\n", "import { AgendamentoDTO } from \"../dto/AgendamentoDTO\";\r\nimport { agendaMock } from \"../mocks/AgendamentoMock\";\r\nimport { agendamentoMock } from \"../mocks/AgendamentoMock\";\r\n\r\nexport class AgendamentoService {\r\n  marcarAgendamento(agendamento: AgendamentoDTO) {\r\n    // Verificar se o m\u00E9dico e o hor\u00E1rio existem na agenda\r\n    const medico = agendaMock.find(\r\n      (medico) => medico.id === agendamento.medico_id && medico.horarios_disponiveis.includes(agendamento.data_horario)\r\n    );\r\n\r\n    if (!medico) {\r\n      throw new Error(\"M\u00E9dico ou hor\u00E1rio indispon\u00EDvel\");\r\n    }\r\n\r\n    // Adicionar o agendamento \u00E0 lista de agendamentos\r\n    agendamentoMock.push(agendamento);\r\n\r\n    return {\r\n      mensagem: \"Agendamento realizado com sucesso\",\r\n      agendamento: {\r\n        medico: medico.nome,\r\n        paciente: agendamento.paciente_nome,\r\n        data_horario: agendamento.data_horario,\r\n      }\r\n    };\r\n  }\r\n}\r\n", "import { IAgendamento } from \"../interface/IAgendamento\";\r\n\r\nexport class AgendamentoDTO implements IAgendamento {\r\n  medico_id: number;\r\n  paciente_nome: string;\r\n  data_horario: string;\r\n\r\n  constructor(medico_id: number, paciente_nome: string, data_horario: string) {\r\n    this.medico_id = medico_id;\r\n    this.paciente_nome = paciente_nome;\r\n    this.data_horario = data_horario;\r\n  }\r\n}\r\n", "import { APIGatewayProxyHandler } from \"aws-lambda\";\r\nimport { AgendamentoService } from \"../service/AgendamentoService\";\r\nimport { AgendamentoDTO } from \"../dto/AgendamentoDTO\";\r\n\r\nconst agendamentoService = new AgendamentoService();\r\n\r\nexport const marcarAgendamento: APIGatewayProxyHandler = async (event) => {\r\n    try {\r\n        // Parse do body para JSON\r\n        const { medico_id, paciente_nome, data_horario } = JSON.parse(event.body || \"{}\");\r\n\r\n        // Verificar se todos os dados foram fornecidos\r\n        if (!medico_id || !paciente_nome || !data_horario) {\r\n            return {\r\n                statusCode: 400,\r\n                body: JSON.stringify({\r\n                    mensagem: \"Dados incompletos. Certifique-se de que todos os campos est\u00E3o preenchidos.\",\r\n                }),\r\n            };\r\n        }\r\n\r\n        // Criar o DTO\r\n        const agendamentoDTO = new AgendamentoDTO(medico_id, paciente_nome, data_horario);\r\n\r\n        // Marcar o agendamento\r\n        const resultado = agendamentoService.marcarAgendamento(agendamentoDTO);\r\n\r\n        // Retornar a resposta de sucesso\r\n        return {\r\n            statusCode: 201,\r\n            body: JSON.stringify(resultado),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        };\r\n    } catch (error) {\r\n        let errorMessage = \"Erro ao processar o agendamento\";\r\n\r\n        if (error instanceof Error) {\r\n            errorMessage = error.message;\r\n        }\r\n\r\n        return {\r\n            statusCode: 400,\r\n            body: JSON.stringify({\r\n                mensagem: errorMessage,\r\n            }),\r\n        };\r\n    }\r\n\r\n\r\n};\r\n"],
  "mappings": "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",
  "names": ["agendaMock", "agendaMock", "medico"]
}
